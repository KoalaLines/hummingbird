/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hummingbird;
//<editor-fold desc="imports" defaultstate="collapsed">

import java.awt.Component;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.TransferHandler;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import uk.co.caprica.vlcj.medialist.MediaList;
import uk.co.caprica.vlcj.player.list.MediaListPlayerMode;
//</editor-fold>

/**
 *
 * @author smbuthia
 */
public class Playlist extends javax.swing.JFrame {

    protected static DefaultListModel<Object> listModel;

    /**
     * Creates new form Playlist
     */
    public Playlist() {
        this.extensions = new String[]{"avi", "mp4"};
        initComponents();
        this.setLocation(200,200);
        playList.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                //Nothing
            }

            @Override
            public void keyPressed(KeyEvent e) {

                if (e.getKeyCode() == KeyEvent.VK_DELETE && !playList.isSelectionEmpty()) {
                    int[] indices = playList.getSelectedIndices();
                    for (int i = 0; i < indices.length; i++) {
                        listModel.remove(i);
                    }
                } else if (e.getKeyCode() == KeyEvent.VK_N) {
                    if (MediaPlayer.mediaListPlayer.isPlaying()) {
                        MediaPlayer.mediaListPlayer.playNext();
                    }
                } else if (e.getKeyCode() == KeyEvent.VK_P) {
                    if (MediaPlayer.mediaListPlayer.isPlaying()) {
                        MediaPlayer.mediaListPlayer.playPrevious();
                    }
                }

            }

            @Override
            public void keyReleased(KeyEvent e) {
                //Nothing
            }
        });
        playList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getButton() == MouseEvent.BUTTON1) {
                    if (evt.getClickCount() == 2) {
                        int index = playList.locationToIndex(evt.getPoint());
                        playVideoList(index, listModel);
                    }
                }
            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listModel = new DefaultListModel<>();
        playList = new javax.swing.JList(listModel);
        jFileChooser2 = new javax.swing.JFileChooser();
        jSeparator1 = new javax.swing.JSeparator();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1000, 1000));

        playList.setBorder(javax.swing.BorderFactory.createTitledBorder("Qued Videos"));
        playList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playList.setToolTipText("Drag and drop videos here to que them");
        playList.setCellRenderer(new FileCellRenderer());
        playList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playList.setDragEnabled(true);
        playList.setDropMode(javax.swing.DropMode.INSERT);
        playList.setValueIsAdjusting(true);
        playList.setTransferHandler(new ListTransferHandler(playList));
        jScrollPane1.setViewportView(playList);

        jFileChooser2.setCurrentDirectory(new java.io.File("C:\\"));
            jFileChooser2.setDialogTitle("");
            jFileChooser2.setFileFilter(new FileNameExtensionFilter("Video Files",extensions));
            jFileChooser2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            jFileChooser2.setDragEnabled(true);
            jFileChooser2.setMultiSelectionEnabled(true);

            playButton.setText("Play All");
            playButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    playButtonActionPerformed(evt);
                }
            });

            pauseButton.setText("Pause");
            pauseButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pauseButtonActionPerformed(evt);
                }
            });

            stopButton.setText("Stop");
            stopButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    stopButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 399, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                        .addComponent(jSeparator1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFileChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(playButton)
                                .addComponent(pauseButton)
                                .addComponent(stopButton))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        playVideoList(0, listModel);
    }//GEN-LAST:event_playButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if (MediaPlayer.mediaListPlayer.isPlaying()) {
            MediaPlayer.mediaListPlayer.pause();
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (MediaPlayer.mediaListPlayer.isPlaying()) {
            MediaPlayer.mediaListPlayer.stop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JList playList;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

    private String[] extensions;

    public void playVideoList(int startIndex, DefaultListModel<Object> videoList) {
        MediaList list = MediaPlayer.mediaPlayerFactory.newMediaList();
        if (!videoList.isEmpty()) {
            if (MediaPlayer.mediaListPlayer.isPlaying()) {
                MediaPlayer.mediaListPlayer.stop();
            }
            Object[] arr = videoList.toArray();
            for (int i = startIndex; i < arr.length; i++) {
                list.addMedia(arr[i].toString());
            }
            MediaPlayer.mediaListPlayer.setMediaList(list);
            MediaPlayer.mediaListPlayer.setMode(MediaListPlayerMode.DEFAULT);
            MediaPlayer.mediaListPlayer.play();
        }
    }
}

class FileCellRenderer extends DefaultListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus) {

        Component c = super.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);

        if (c instanceof JLabel && value instanceof File) {
            JLabel l = (JLabel) c;
            File f = (File) value;
            l.setIcon(FileSystemView.getFileSystemView().getSystemIcon(f));
            l.setText(f.getName());
            l.setToolTipText(f.getAbsolutePath());
        }

        return c;
    }
}

class ListTransferHandler extends TransferHandler {

    private JList list;

    ListTransferHandler(JList list) {
        this.list = list;
    }

    @Override
    public boolean canImport(TransferHandler.TransferSupport info) {
        // we only import FileList
        if (!info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
            return false;
        }
        return true;
    }

    @Override
    public boolean importData(TransferHandler.TransferSupport info) {
        if (!info.isDrop()) {
            return false;
        }

        // Check for FileList flavor
        if (!info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
            displayDropLocation("List doesn't accept a drop of this type.");
            return false;
        }

        // Get the fileList that is being dropped.
        Transferable t = info.getTransferable();
        List<File> data;
        try {
            data = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
        } catch (UnsupportedFlavorException | IOException e) {
            return false;
        }
        DefaultListModel model = (DefaultListModel) list.getModel();
        for (Object file : data) {
            model.addElement((File) file);
        }
        return true;
    }

    private void displayDropLocation(String string) {
        System.out.println(string);
    }
}

class ExtensionFileFilter extends FileFilter {

    String description;
    String extensions[];

    public ExtensionFileFilter(String description, String extension) {
        this(description, new String[]{extension});
    }

    public ExtensionFileFilter(String description, String extensions[]) {
        if (description == null) {
            this.description = extensions[0];
        } else {
            this.description = description;
        }
        this.extensions = (String[]) extensions.clone();
        toLower(this.extensions);
    }

    private void toLower(String array[]) {
        for (int i = 0, n = array.length; i < n; i++) {
            array[i] = array[i].toLowerCase();
        }
    }

    @Override
    public String getDescription() {
        return description;
    }

    @Override
    public boolean accept(File file) {
        if (file.isDirectory()) {
            return true;
        } else {
            String path = file.getAbsolutePath().toLowerCase();
            for (int i = 0, n = extensions.length; i < n; i++) {
                String extension = extensions[i];
                if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                    return true;
                }
            }
        }
        return false;
    }
}
