/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hummingbird;
//<editor-fold desc="imports" defaultstate="collapsed">

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import uk.co.caprica.vlcj.medialist.MediaList;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.player.embedded.videosurface.CanvasVideoSurface;
import uk.co.caprica.vlcj.player.list.MediaListPlayer;
//</editor-fold>

/**
 *
 * @author smbuthia
 */
public class MediaPlayer extends javax.swing.JFrame implements MouseListener {

//    protected static MediaList mediaList;
    protected final static MediaPlayerFactory mediaPlayerFactory = new MediaPlayerFactory();
    ;
    private final EmbeddedMediaPlayer mediaPlayer;
    protected static MediaListPlayer mediaListPlayer;
    private final Dimension screenSize;
    private final double screenWidth, screenHeight;
    private int locAX, locAY;
    private int locBX, locBY;
    private int locCX, locCY;
    private int locDX, locDY;
    private final Canvas canvas;
    private final JPanel panel;
    private final CanvasVideoSurface videoSurface;
    private String panelBehaviour;
    private Properties props = new Properties();
    private String hideDuration;
    private int hDuration;

    /**
     * Creates new form MediaPlayer
     */
    public MediaPlayer() {
        initComponents();

        mediaListPlayer = mediaPlayerFactory.newMediaListPlayer();
        canvas = new Canvas();
        canvas.addMouseListener(this);
        canvas.setBackground(Color.BLACK);
        videoSurface = mediaPlayerFactory.newVideoSurface(canvas);
        mediaPlayer = mediaPlayerFactory.newEmbeddedMediaPlayer();
        mediaPlayer.setVideoSurface(videoSurface);
        mediaPlayer.setEnableMouseInputHandling(false);
        mediaPlayer.setEnableKeyInputHandling(false);
        mediaListPlayer.setMediaPlayer(mediaPlayer);
//        mediaList = mediaPlayerFactory.newMediaList();
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        screenWidth = screenSize.getWidth();
        screenHeight = screenSize.getHeight();
        locAX = (int) screenWidth - this.getSize().width;
        locAY = (int) screenHeight - this.getSize().height;
        locBX = 0;
        locBY = 0;
        locCX = locBX;
        locCY = locAY;
        locDX = locAX;
        locDY = locBY;
        this.setLocation(locAX, locAY);
        this.setAlwaysOnTop(true);
        panel = new JPanel(new BorderLayout());
        panel.setLayout(new BorderLayout());
        panel.add(canvas, BorderLayout.CENTER);
        this.setContentPane(panel);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                PrintStream nullStream;
                nullStream = new PrintStream(new OutputStream() {
                    @Override
                    public void write(int b) throws IOException {
                    }

                    @Override
                    public void write(byte b[]) throws IOException {
                    }

                    @Override
                    public void write(byte b[], int off, int len) throws IOException {
                    }
                });
                System.setErr(nullStream);
                System.setOut(nullStream);
                System.exit(0);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(250, 200));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void mouseClicked(MouseEvent e) {
        //TODO Mouse Clicked Action
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //TODO Mouse Pressed Action
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //TODO Mouse Released Action
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        try {
            props.load(new FileInputStream("config.properties"));
            panelBehaviour = props.getProperty("PanelBehaviour");
            switch (panelBehaviour) {
                case Settings.EVADE_RB_ACTION_COMMAND:
                    locAX = (int) screenWidth - this.getSize().width;
                    locAY = (int) screenHeight - this.getSize().height;
                    locCY = locAY;
                    locDX = locAX;
                    if (this.getLocationOnScreen().x == locAX && this.getLocationOnScreen().y == locAY) {
                        this.setLocation(locBX, locBY);
                    } else if (this.getLocationOnScreen().x == locBX && this.getLocationOnScreen().y == locBY) {
                        this.setLocation(locCX, locCY);
                    } else if (this.getLocationOnScreen().x == locCX && this.getLocationOnScreen().y == locCY) {
                        this.setLocation(locDX, locDY);
                    } else {
                        this.setLocation(locAX, locAY);
                    }
                    break;
                case Settings.HIDE_RB_ACTION_COMMAND:
                    //Hide frame for a duration
                    this.setVisible(false);
                    hideDuration = props.getProperty("HideDuration");
                    hDuration = Integer.parseInt(hideDuration.replaceAll("[\\D]", ""));
                    try {
                        Thread.sleep(hDuration * 1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MediaPlayer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.setVisible(true);
                    break;
            }
        } catch (IOException ex) {
            Logger.getLogger(MediaPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //TODO Mouse Exited Action
    }
}
